package scala.streaming

import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.SparkContext._
import org.apache.spark.streaming.twitter._
import org.apache.spark.SparkConf
import org.apache.spark.HashPartitioner

import org.apache.spark.streaming.dstream.TransformedDStream

import org.apache.log4j.Logger
import org.apache.log4j.Level
import org.apache.spark.storage.StorageLevel

import java.net._
import java.io._
import scala.io._


import scala.io.Source



object TopWords {


val app_name = "Top_Words_"
		val sparkConf = new SparkConf().setAppName(app_name)
		val ssc = new StreamingContext(sparkConf, Seconds(10))

	/*
	*  Takes a string a words within that string to search for. These words are replaced
	*  with replacement string.
	*/
	def replaceWords(line:String, searchWords:Array[String], replacement:String) : String = {
		var result = line

		for (word <- searchWords) {
			result = result.replace(word,replacement)
		}
		return result
	}


	/*
	*  Takes a tuple (string, int)  - word and count. Returns a tuple (string, int, string) - word, count and classification of word.
	*/
	def classify(wordCounts:(String,Int), goodWords:Array[String], badWords:Array[String]) : (String, Int, String) = {
		if(goodWords.contains(wordCounts._1)) {
			return (wordCounts._1,wordCounts._2,"g")
		}
		else if(badWords.contains(wordCounts._1)) {
			return (wordCounts._1,wordCounts._2,"b")
		}
		else {
			return (wordCounts._1,wordCounts._2,"n")
		}
	}



	def main(args: Array[String]) {
		if (args.length < 6) {                      //   0               1                2                    3           4     5
			System.err.println("Usage: TopWords <consumer key> <consumer secret> <access token> <access token secret> <IP> <Port>")
			System.exit(1)
		}

		Logger.getLogger("org").setLevel(Level.OFF)
		Logger.getLogger("akka").setLevel(Level.OFF)

		val updateFunc = (values: Seq[Int], state: Option[Int]) => {
			val currentCount = values.sum
			val previousCount = state.getOrElse(0)

			Some(currentCount + previousCount)
		}

		val newUpdateFunc = (iterator: Iterator[(String, Seq[Int], Option[Int])]) => {
			iterator.flatMap(t => updateFunc(t._2, t._3).map(s => (t._1, s)))
		}

		


		val ip = args(4)
		val port = args(5)
		val checkpointDir = args(6)
		val wordsToPrint = 60
		val sessionTimeout = 50000 //120000


		val Array(consumerKey, consumerSecret, accessToken, accessTokenSecret) = args.take(4)
		val tokens = args.take(4)
		val filters = args.drop(7)

		println("Searches " + filters.deep.mkString("\n"))


		val source : InputStream = getClass.getResourceAsStream("/StopWords.txt")
		val stopWords = scala.io.Source.fromInputStream(source).mkString.split("\n")
		
		val sourcePos : InputStream = getClass.getResourceAsStream("/PositiveWords.txt")
		val positiveWords = scala.io.Source.fromInputStream(sourcePos).mkString.split("\n")

		val sourceNeg : InputStream = getClass.getResourceAsStream("/NegativeWords.txt")
		val negativeWords = scala.io.Source.fromInputStream(sourceNeg).mkString.split("\n")		

		val sourceHappyEmoji : InputStream = getClass.getResourceAsStream("/HappyEmoticons.txt")
		val happyEmojiWords = scala.io.Source.fromInputStream(sourceHappyEmoji).mkString.split("\n")	

		val sourceSadEmoji : InputStream = getClass.getResourceAsStream("/SadEmoticons.txt")
		val sadEmojiWords = scala.io.Source.fromInputStream(sourceSadEmoji).mkString.split("\n")	

		val sourceProf : InputStream = getClass.getResourceAsStream("/Profanity.txt")
		val profanityWords = scala.io.Source.fromInputStream(sourceProf).mkString.split("\n")	


		


		System.setProperty("twitter4j.oauth.consumerKey", consumerKey)
		System.setProperty("twitter4j.oauth.consumerSecret", consumerSecret)
		System.setProperty("twitter4j.oauth.accessToken", accessToken)
		System.setProperty("twitter4j.oauth.accessTokenSecret", accessTokenSecret)

		
		ssc.checkpoint(checkpointDir)//"/home/training/Documents/Tech_Challenge/checkpoints/")


		object auth {
			val config = new twitter4j.conf.ConfigurationBuilder()

			.setOAuthConsumerKey(consumerKey)
			.setOAuthConsumerSecret(consumerSecret)
			.setOAuthAccessToken(accessToken)
			.setOAuthAccessTokenSecret(accessTokenSecret)
			.setIncludeMyRetweetEnabled(false)
			.build
		}

		val twitter_auth = new twitter4j.TwitterFactory(auth.config)
		val a = new twitter4j.auth.OAuthAuthorization(auth.config)

		val atwitter : Option[twitter4j.auth.Authorization] =  Some(twitter_auth.getInstance(a).getAuthorization())
		val stream = TwitterUtils.createStream(ssc, atwitter, filters, StorageLevel.MEMORY_ONLY)

		stream.persist(StorageLevel.MEMORY_ONLY)


		//Remove any tweets with empty text tweets, that are sensitive tweets and don't specify english as lang
		val nonNullStream = stream.filter(tweet =>
			tweet.getText().trim().length() > 0 && //replaceWords(_,profanityWords,"profanity")
			! tweet.isPossiblySensitive() &&
			tweet.toString().contains("lang=\'en\'")
		);


		val textOnly = nonNullStream.map(tweet => tweet.getText().toLowerCase().trim())

	

		val replaced = textOnly.map(replaceWords(_,happyEmojiWords,"happyemoticon")).map(replaceWords(_,sadEmojiWords,"sademoticon")).map(replaceWords(_,profanityWords,"profanity"))


		//Alpha characters only
		val alphaOnly = replaced.flatMap(line =>line.replaceAll("[^a-z ]","").split("[ ]"))

		//Remove any empty words, retweets, http refs, filter words
		val filteredWords = alphaOnly.filter(word=>word.length()>1 && !word.equals("rt") && !word.matches("^http.*") && !filters.contains(word))

		//Remove stop words
		val removedStopWords  = filteredWords.filter(!stopWords.contains(_))

		//Distinct words - count each word per tweet once
		//val distinctWords = removedStopWords

		//Count words
		val wordDstream = removedStopWords.map(x => (x, 1))



		val initialRDD = ssc.sparkContext.parallelize(Array[(String,Int)]()) 

		val stateDstream = wordDstream.updateStateByKey[Int](newUpdateFunc, new HashPartitioner (ssc.sparkContext.defaultParallelism), true, initialRDD)
		val sortedreqs = stateDstream.transform(rdd => rdd.sortByKey(false))





		sortedreqs.foreachRDD(rdd=>{
			try{
			val s = new Socket(InetAddress.getByName(ip), Integer.parseInt(port))
			//lazy val in = new BufferedSource(s.getInputStream()).getLines()
			val out = new PrintStream(s.getOutputStream())

			var count = 1

			val rdd_arr = rdd.takeOrdered(wordsToPrint)(Ordering[Int].reverse.on(_._2)).map(classify(_,positiveWords,negativeWords)) //.collect()
			//var total = rdd_arr.count()

			var jsonOut = "{\"name\": \"flare\",\"children\":["

			rdd_arr.foreach(item =>{
				jsonOut = jsonOut +  "{\"name\":\"" + item._1 +"\",\"size\": " + item._2 + ",\"type\":\"" + item._3 + "\"}"
				//if (count < total){
				//	count=count+1
					jsonOut = jsonOut + ","
				//}
			})

			jsonOut = jsonOut.replaceAll(",$","")
			jsonOut = jsonOut + "]}\n"
		
			out.println(jsonOut)
			out.flush()
			s.close()

			} catch {
			case e: java.net.ConnectException => println("what a hack " + app_name); try { ssc.stop(); } catch { case e:java.lang.InterruptedException=>System.exit(1);}
			}
		})


		ssc.start()
		ssc.awaitTermination //OrTimeout(100000000)
		ssc.stop()
		println("DONE")
	}

}

